<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <title>Daftar Tugas Saya</title>
  </head>
  <body>
    <div class="container mt-5">
      <h1>Daftar Tugas Saya</h1>
      <p>Ini adalah halaman daftar tugas saya.</p>

      <!-- Notifikasi -->
      <div id="alert-container"></div>

      <!-- Daftar tugas (via JavaScript) -->
      <ul id="todo-list" class="list-group mb-4"></ul>

      <!-- Form input untuk Post / Put / Delete -->
      <div class="form-group">
        <input type="text" id="taskInput" class="form-control" placeholder="Tugas" />
        <input type="number" id="taskId" class="form-control mt-2" placeholder="ID (untuk PUT/DELETE)" />
      </div>

      <!-- Tombol Aksi -->
      <button class="btn btn-success" onclick="getTodos()">GET</button>
      <button class="btn btn-primary" onclick="postTodo()">POST</button>
      <button class="btn btn-warning" onclick="putTodo()">PUT</button>
      <button class="btn btn-danger" onclick="deleteTodo()">DELETE</button>
      <a href="/" class="btn btn-secondary ml-2">Go to Home</a>
    </div>

    <script>
      const API_URL = 'http://localhost:3000/todos';

      // Tampilkan pesan notifikasi
      function showMessage(msg, type = 'success') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.textContent = msg;
        document.getElementById('alert-container').innerHTML = '';
        document.getElementById('alert-container').appendChild(alertDiv);
        setTimeout(() => alertDiv.remove(), 2000);
      }

      // Ambil semua tugas
      function getTodos() {
        fetch(API_URL)
          .then(res => res.json())
          .then(data => {
            const list = document.getElementById('todo-list');
            list.innerHTML = '';
            data.forEach(todo => {
              const li = document.createElement('li');
              li.className = 'list-group-item';
              li.textContent = `ID: ${todo.id} Tugas: ${todo.task}`;
              list.appendChild(li);
            });
          });
      }

      // Tambah tugas
      function postTodo() {
        const task = document.getElementById('taskInput').value.trim();
        if (!task) {
          showMessage('Task tidak boleh kosong!', 'danger');
          return;
        }

        fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ task })
        })
        .then(res => res.json())
        .then(() => {
          showMessage('Tugas berhasil ditambahkan!', 'success');
          document.getElementById('taskInput').value = '';
          getTodos();
        });
      }

      // Edit tugas
      function putTodo() {
        const id = document.getElementById('taskId').value.trim();
        const task = document.getElementById('taskInput').value.trim();

        if (!id || !task) {
          showMessage('ID dan Task wajib diisi!', 'danger');
          return;
        }

        fetch(`${API_URL}/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ task })
        })
        .then(res => {
          if (!res.ok) {
            return res.json().then(err => {
              throw new Error(err.error || 'Gagal mengupdate tugas!');
            });
          }
          return res.json();
        })
        .then(() => {
          showMessage('Tugas berhasil diupdate!', 'success');
          document.getElementById('taskInput').value = '';
          document.getElementById('taskId').value = '';
          getTodos();
        })
        .catch(err => {
          showMessage(err.message, 'danger');
        });
      }

      // Hapus tugas
      function deleteTodo() {
        const id = document.getElementById('taskId').value.trim();
        if (!id) {
          showMessage('ID harus diisi untuk menghapus!', 'danger');
          return;
        }

        fetch(`${API_URL}/${id}`, {
          method: 'DELETE'
        })
        .then(res => {
          if (!res.ok) {
            return res.json().then(err => {
              throw new Error(err.error || 'Gagal menghapus tugas!');
            });
          }
          return res.json();
        })
        .then(() => {
          showMessage('Tugas berhasil dihapus!', 'success');
          document.getElementById('taskId').value = '';
          document.getElementById('taskInput').value = '';
          getTodos();
        })
        .catch(err => {
          showMessage(err.message, 'danger');
        });
      }

      // Ambil data saat halaman dimuat
      window.onload = getTodos;
    </script>
  </body>
</html>
